var Ghost, GhostScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GhostScene = (function(_super) {
  __extends(GhostScene, _super);

  function GhostScene() {
    this.onMouseMove = __bind(this.onMouseMove, this);
    this.onTouchMove = __bind(this.onTouchMove, this);
    var blur, gui, metaball, start;
    GhostScene.__super__.constructor.call(this);
    this.sound = new Howl({
      urls: ['sfx/space_sounds_01.mp3'],
      autoplay: true,
      loop: true,
      volume: 0.5
    });
    start = new PIXI.Point(window.innerWidth / 2, window.innerHeight * .75);
    if (!isMobile.any) {
      this.pool = new ObjectPool((function(_this) {
        return function() {
          return new Ghost(_this, start);
        };
      })(this), 10, 40);
      this.auto = true;
      this.time = 0;
      this.tick = 300;
      start.x /= 2;
      start.y /= 2;
    } else {
      this.pool = new ObjectPool((function(_this) {
        return function() {
          return new Ghost(_this, start);
        };
      })(this), 1, 5);
      this.auto = false;
      this.time = 0;
      this.tick = 1000;
    }
    this.mousePosition = new PIXI.Point();
    this.bg = new PIXI.Graphics();
    this.bg.beginFill(0x111111, 1);
    this.bg.drawRect(0, 0, window.innerWidth, window.innerHeight);
    this.bg.endFill();
    if (!isMobile.any) {
      this.backgroundFilter = new BackgroundFilter();
      this.bg.filters = [this.backgroundFilter];
    }
    this.bg.bounds = new PIXI.Rectangle(0, 0, window.innerWidth, window.innerHeight);
    Stage2d.addChild(this.bg);
    this.container = new PIXI.DisplayObjectContainer();
    this.addChild(this.container);
    this.hack = new PIXI.Graphics();
    this.hack.beginFill(0xFF0000, 1);
    this.hack.drawRect(0, 0, 0, 0);
    this.hack.position.x = window.innerWidth;
    this.hack.position.y = window.innerHeight;
    this.hack.endFill();
    this.container.addChild(this.hack);
    this.ball = new PIXI.Graphics();
    this.ball.beginFill(0xFFFFFF);
    this.ball.drawCircle(0, 0, 25);
    this.ball.endFill();
    this.ball.x = start.x;
    this.ball.y = start.y;
    this.ghosts = [];
    this.ghosts2 = [];
    blur = new PIXI.BlurFilter();
    blur.blurX = blur.blurY = 60;
    metaball = new MetaballFilter();
    this.displayFace = true;
    this.manualControl = true;
    console.log(' B');
    gui = new dat.GUI();
    this.mute = false;
    gui.add(this, 'mute').onChange((function(_this) {
      return function() {
        if (_this.mute) {
          _this.sound.volume(0);
        } else {
          _this.sound.volume(0.5);
        }
      };
    })(this)).name('mute sound');
    gui.add(this, 'tick', 50, 500);
    gui.add(this, 'displayFace').onChange((function(_this) {
      return function() {
        var g, _i, _len, _ref;
        _ref = _this.ghosts2;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          g = _ref[_i];
          if (_this.displayFace) {
            _this.addChild(g);
          } else {
            _this.removeChild(g);
          }
        }
      };
    })(this));
    gui.add(this, 'auto').onChange((function(_this) {
      return function() {};
    })(this)).name('auto/manual');
    this.container.filters = [blur, metaball];
    return;
  }

  GhostScene.prototype.transitionIn = function() {
    window.addEventListener('mousemove', this.onMouseMove);
    window.addEventListener('touchmove', this.onTouchMove);
    GhostScene.__super__.transitionIn.call(this);
  };

  GhostScene.prototype.onTouchMove = function(e) {
    this.mousePosition.x = e.touches[0].pageX / 2;
    this.mousePosition.y = e.touches[0].pageY / 2;
  };

  GhostScene.prototype.onMouseMove = function(e) {
    this.mousePosition.x = e.pageX;
    this.mousePosition.y = e.pageY;
  };

  GhostScene.prototype.update = function(dt) {
    var i, start, target, _i, _ref;
    if (this.backgroundFilter) {
      this.backgroundFilter.uniforms.time.value = Math.random();
    }
    this.time += dt;
    if (!this.auto) {
      this.ball.scale.y += -this.ball.scale.y * .03;
      this.ball.scale.x = this.ball.scale.y;
    } else {
      target = (Math.sin(this.time / 800) * 10 + 25) * .05;
      this.ball.scale.y += (target - this.ball.scale.y) * .05;
      this.ball.scale.x = this.ball.scale.y;
    }
    if ((this.auto && this.time >= this.tick) || (!this.auto && this.ghosts.length === 0)) {
      start = new PIXI.Point(window.innerWidth / 2, window.innerHeight * .75);
      if (isMobile.any) {
        start.x /= 2;
        start.y /= 2;
      }
      this.logBoo();
      this.time = 0;
      this.ghost = this.pool.checkOut();
      this.ghost2 = this.pool.checkOut();
      this.ghost.init(start);
      this.ghost.associate(this.ghost2);
      this.container.addChild(this.ghost);
      if (this.displayFace) {
        this.addChild(this.ghost2);
      }
      this.ghosts.push(this.ghost);
      this.ghosts2.push(this.ghost2);
    }
    for (i = _i = _ref = this.ghosts.length - 1; _i >= 0; i = _i += -1) {
      this.ghosts[i].update(dt);
    }
    if (!this.auto) {
      this.ghost.points[0].x = this.mousePosition.x / this.ghost.scale.x;
      this.ghost.points[0].y = this.mousePosition.y / this.ghost.scale.y;
    }
  };

  GhostScene.prototype.logBoo = function() {
    var i, r, s, x, _i;
    s = "";
    x = Math.floor(Math.random() * 3);
    for (i = _i = 0; _i < x; i = _i += 1) {
      s += " ";
    }
    r = Math.random();
    if (r > .66) {
      s += "0";
    } else if (r > .33) {
      s += "o";
    } else {
      s += "O";
    }
    console.log(s);
  };

  GhostScene.prototype.resize = function() {
    this.bg.clear();
    this.bg.beginFill(0x111111, 1);
    this.bg.drawRect(0, 0, window.innerWidth, window.innerHeight);
    this.bg.endFill();
    this.bg.bounds = new PIXI.Rectangle(0, 0, window.innerWidth, window.innerHeight);
    this.hack.position.x = window.innerWidth;
    this.hack.position.y = window.innerHeight;
  };

  return GhostScene;

})(Scene);

Ghost = (function(_super) {
  __extends(Ghost, _super);

  function Ghost(ref, start, points) {
    var texture;
    this.ref = ref;
    this.points = points;
    this.init(start);
    texture = PIXI.Texture.fromImage("./img/ghost.png");
    Ghost.__super__.constructor.call(this, texture, this.points);
    this.scale.y = this.scale.x = .25 + .35 * Math.random();
    return;
  }

  Ghost.prototype.init = function(start) {
    var count, i, scale, _i;
    this.destroying = false;
    this.snakeFactor = .1 + Math.random() * .9;
    this.time = Math.random() * 5000;
    this.angle = 0;
    this.speed = (8 + Math.random() * 32) / 24;
    if (Math.random() > .5) {
      this.angleTarget = -Math.PI / 2 + 0.5 * Math.random() - 0.25;
    } else {
      this.angleTarget = Math.PI * 2 - Math.PI / 2 + 0.5 * Math.random() - 0.25;
    }
    this.auto = true;
    count = 40;
    if (isMobile.any) {
      count = 14;
    }
    scale = .25 + .35 * Math.random();
    this.points = [];
    for (i = _i = 0; _i < count; i = _i += 1) {
      this.points.push(new PIXI.Point(start.x / scale, start.y / scale));
    }
    if (this.scale) {
      this.scale.y = this.scale.x = scale;
    }
  };

  Ghost.prototype.associate = function(ghost) {
    this.friend = ghost;
    this.friend.points = this.points;
  };

  Ghost.prototype.update = function(dt) {
    var angle, current, dx, dy, i, idx, previous, _i, _ref;
    if (this.destroying === true) {
      return;
    }
    this.time += dt;
    if (this.auto) {
      this.angle += (this.angleTarget - this.angle) * 0.05;
      angle = this.angle + Math.cos(this.time / 300) * this.snakeFactor;
      this.points[0].x += Math.cos(angle) * (this.speed * dt);
      this.points[0].y += Math.sin(angle) * (this.speed * dt);
    }
    if (this.friend) {
      this.friend.scale.x = this.scale.x;
      this.friend.scale.y = this.scale.y;
    }
    for (i = _i = 1, _ref = this.points.length; _i < _ref; i = _i += 1) {
      current = this.points[i];
      previous = this.points[i - 1];
      dx = current.x - previous.x;
      dy = current.y - previous.y;
      if ((dx * dx + dy * dy) > 250) {
        current.x += (previous.x - current.x) * (.25 + i * .005);
        current.y += (previous.y - current.y) * (.25 + i * .005);
      }
    }
    if (this.points[this.points.length - 1].y < -10) {
      this.destroying = true;
      this.ref.pool.checkIn(this);
      idx = this.ref.ghosts.indexOf(this);
      if (idx !== -1) {
        this.ref.ghosts.splice(idx, 1);
        this.ref.container.removeChild(this);
      } else {
        idx = this.ref.ghosts2.indexOf(this);
        if (idx !== -1) {
          this.ref.ghosts2.splice(idx, 1);
          this.ref.removeChild(this);
        }
      }
    }
  };

  return Ghost;

})(PIXI.Rope);

//# sourceMappingURL=data:application/json;base64,