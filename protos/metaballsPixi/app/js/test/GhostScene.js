var Ghost, GhostScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GhostScene = (function(_super) {
  __extends(GhostScene, _super);

  function GhostScene() {
    this.onMouseMove = __bind(this.onMouseMove, this);
    this.onTouchMove = __bind(this.onTouchMove, this);
    var blur, gui, metaball;
    GhostScene.__super__.constructor.call(this);
    this.mousePosition = new PIXI.Point();
    this.bg = new PIXI.Graphics();
    this.bg.beginFill(0x111111, 1);
    this.bg.drawRect(0, 0, window.innerWidth, window.innerHeight);
    this.bg.endFill();
    if (!isMobile.any) {
      this.backgroundFilter = new BackgroundFilter();
      this.bg.filters = [this.backgroundFilter];
    }
    this.bg.bounds = new PIXI.Rectangle(0, 0, window.innerWidth, window.innerHeight);
    Stage2d.addChild(this.bg);
    this.container = new PIXI.DisplayObjectContainer();
    this.addChild(this.container);
    this.hack = new PIXI.Graphics();
    this.hack.beginFill(0xFF0000, 1);
    this.hack.drawRect(0, 0, 0, 0);
    this.hack.position.x = window.innerWidth;
    this.hack.position.y = window.innerHeight;
    this.hack.endFill();
    this.container.addChild(this.hack);
    this.ghost = new Ghost();
    this.ghost2 = new Ghost(this.ghost.points);
    setTimeout((function(_this) {
      return function() {
        _this.container.addChild(_this.ghost);
        _this.addChild(_this.ghost2);
      };
    })(this), 1000);
    blur = new PIXI.BlurFilter();
    blur.blurX = blur.blurY = 30;
    metaball = new MetaballFilter();
    gui = new dat.GUI();
    gui.add(blur, 'blurX', 0, 100);
    gui.add(blur, 'blurY', 0, 100);
    gui.add(metaball.uniforms.min, 'value', 0, 1);
    gui.add(this.ghost.scale, 'x', 0, 1);
    gui.add(this.ghost.scale, 'y', 0, 1);
    gui.close();
    this.container.filters = [blur, metaball];
    return;
  }

  GhostScene.prototype.transitionIn = function() {
    window.addEventListener('mousemove', this.onMouseMove);
    window.addEventListener('touchmove', this.onTouchMove);
    GhostScene.__super__.transitionIn.call(this);
  };

  GhostScene.prototype.onTouchMove = function(e) {
    this.mousePosition.x = e.touches[0].pageX / 2;
    this.mousePosition.y = e.touches[0].pageY / 2;
  };

  GhostScene.prototype.onMouseMove = function(e) {
    this.mousePosition.x = e.pageX;
    this.mousePosition.y = e.pageY;
  };

  GhostScene.prototype.update = function(dt) {
    if (this.backgroundFilter) {
      this.backgroundFilter.uniforms.time.value = Math.random();
    }
    this.ghost.points[0].x = this.mousePosition.x / this.ghost.scale.x;
    this.ghost.points[0].y = this.mousePosition.y / this.ghost.scale.y;
    this.ghost.update();
    this.ghost2.scale.x = this.ghost.scale.x;
    this.ghost2.scale.y = this.ghost.scale.y;
  };

  GhostScene.prototype.resize = function() {
    this.bg.clear();
    this.bg.beginFill(0xFF0000, 1);
    this.bg.drawRect(0, 0, window.innerWidth, window.innerHeight);
    this.bg.endFill();
    this.bg.bounds = new PIXI.Rectangle(0, 0, window.innerWidth, window.innerHeight);
    this.hack.position.x = window.innerWidth;
    this.hack.position.y = window.innerHeight;
  };

  return GhostScene;

})(Scene);

Ghost = (function(_super) {
  __extends(Ghost, _super);

  function Ghost(points) {
    var count, i, length, texture, _i;
    count = 40;
    if (isMobile.any) {
      count = 20;
    }
    length = 400 / count;
    if (points === void 0) {
      points = [];
      for (i = _i = 0; _i < count; i = _i += 1) {
        points.push(new PIXI.Point(i * length, Math.random() * 30));
      }
    }
    texture = PIXI.Texture.fromImage("img/ghost.png");
    Ghost.__super__.constructor.call(this, texture, points);
    this.scale.x = .5;
    this.scale.y = .5;
    return;
  }

  Ghost.prototype.update = function() {
    var current, dx, dy, i, previous, _i, _ref, _results;
    _results = [];
    for (i = _i = 1, _ref = this.points.length; _i < _ref; i = _i += 1) {
      current = this.points[i];
      previous = this.points[i - 1];
      dx = current.x - previous.x;
      dy = current.y - previous.y;
      if ((dx * dx + dy * dy) > 250) {
        current.x += (previous.x - current.x) * (.25 + i * .005);
        _results.push(current.y += (previous.y - current.y) * (.25 + i * .005));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Ghost;

})(PIXI.Rope);

//# sourceMappingURL=data:application/json;base64,