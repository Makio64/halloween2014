var Ball, Metaball2dScene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Metaball2dScene = (function(_super) {
  __extends(Metaball2dScene, _super);

  function Metaball2dScene() {
    this.onMouseMove = __bind(this.onMouseMove, this);
    var ball, blur, gui, i, metaball, _i;
    Metaball2dScene.__super__.constructor.call(this);
    this.mousePosition = new PIXI.Point();
    this.bg = new PIXI.Graphics();
    this.bg.beginFill(0x111111, 1);
    this.bg.drawRect(0, 0, window.innerWidth, window.innerHeight);
    this.bg.endFill();
    this.addChild(this.bg);
    this.bg = new PIXI.Graphics();
    this.bg.beginFill(0xFF0000, 1);
    this.bg.drawRect(0, 0, 0, 0);
    this.bg.position.x = window.innerWidth;
    this.bg.position.y = window.innerHeight;
    this.bg.endFill();
    this.addChild(this.bg);
    this.balls = [];
    for (i = _i = 0; _i < 200; i = _i += 1) {
      ball = new Ball();
      ball.position.x = window.innerWidth * (Math.random() * 0.8 + 0.1);
      ball.position.y = window.innerHeight * (Math.random() * 0.8 + 0.1);
      this.balls.push(ball);
      this.addChild(ball);
    }
    blur = new PIXI.BlurFilter();
    blur.blurX = blur.blurY = 30;
    gui = new dat.GUI();
    gui.add(blur, 'blurX', 0, 100);
    gui.add(blur, 'blurY', 0, 100);
    metaball = new MetaballFilter();
    gui.add(metaball.uniforms.min, 'value', 0, 1);
    this.filters = [blur, metaball];
    return;
  }

  Metaball2dScene.prototype.transitionIn = function() {
    window.addEventListener('mousemove', this.onMouseMove);
    Metaball2dScene.__super__.transitionIn.call(this);
  };

  Metaball2dScene.prototype.onMouseMove = function(e) {
    this.mousePosition.x = e.x;
    this.mousePosition.y = e.y;
  };

  Metaball2dScene.prototype.update = function() {
    var ball, i, _i, _ref;
    for (i = _i = 1, _ref = this.balls.length; _i < _ref; i = _i += 1) {
      this.balls[i].update();
    }
    ball = this.balls[0];
    ball.position.x = this.mousePosition.x;
    ball.position.y = this.mousePosition.y;
  };

  return Metaball2dScene;

})(Scene);

Ball = (function(_super) {
  __extends(Ball, _super);

  function Ball() {
    Ball.__super__.constructor.call(this);
    this.beginFill(0xFFFFFF, 1);
    this.radius = 40 * Math.random() + 10;
    this.angle = Math.random() * Math.PI * 2;
    this.drawCircle(0, 0, this.radius);
    this.endFill();
    return;
  }

  Ball.prototype.update = function() {
    this.position.x += Math.cos(this.angle);
    this.position.y += Math.sin(this.angle);
    if (this.position.x > window.innerWidth + 100) {
      this.position.x = -90;
    } else if (this.position.x < -100) {
      this.position.x = window.innerWidth + 90;
    }
    if (this.position.y > window.innerHeight + 100) {
      this.position.y = -90;
    } else if (this.position.y < -100) {
      this.position.y = window.innerHeight + 90;
    }
    this.position.y += Math.sin(this.angle) * 2;
  };

  return Ball;

})(PIXI.Graphics);

//# sourceMappingURL=data:application/json;base64,